name: main_workflow

# Ejecuta el workflow en un push a la rama especificada
on:
  push:
    branches:
      - react_app_deploy # solo se ejecutara en un push a esta rama

# ahora ejecutamos este job llamado linter execution
jobs:
  build_job:
    runs-on: ubuntu-24.04

    steps:
      # Step 1: Install npm
      - name: actions_checkout #nombre del step
        uses: actions/checkout@v4 # la accion que ejecuta en este caso obtiene el codigo del repositorio actions/checkout@v4
      - name: npm install
        run: | # instala jest que es un framework de pruebas de javascript.
          npm install  
          npm run build
        # working-directory: ./my-react-app

        # Sube los artifacts/ficheros generados por el siguiente job en este caso seran los archivos estaticos generados por "nmp run" los pondra en la carpeta  ./build
        # Artefactos en GitHub Actions son archivos generados o producidos en un job, que luego pueden ser almacenados y descargados en otro job o en un flujo posterior.
        # Los artefactos son útiles para compartir datos entre jobs o guardarlos como parte del proceso de la construcción o despliegue.
        # También se utilizan para depuración (como los archivos de log) o para almacenar resultados de pruebas.
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: static-files
          path: ./build # El directorio donde se guardan los archivos estáticos generados por React

  deploy_job:
    needs: build_job # Este job depende del resultado del job 'build'
    runs-on: ubuntu-24.04

    steps:
      # Obtener el código del repositorio (descarga los artefactos)
      - name: Checkout repository
        uses: actions/checkout@v4

      # Descargar los artefactos generados por el job de construcción
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: static-files

      # Desplegar la aplicación a Surge
      - name: Deploy to foo-bar.surge.sh
        uses: dswistowski/surge-sh-action@v1
        with:
          domain: "foo-bar.surge.sh"
          project: "."
          login: ${{ secrets.surge_login }}
          token: ${{ secrets.surge_token }}
